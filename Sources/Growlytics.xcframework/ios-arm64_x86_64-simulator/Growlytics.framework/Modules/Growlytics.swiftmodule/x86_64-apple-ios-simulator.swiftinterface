// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios16.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Growlytics
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreData
import CoreTelephony
import Foundation
@_exported import Growlytics
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import UserNotificationsUI
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc(NewSession) public class NewSession : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Growlytics.NewSession {
  @objc @NSManaged dynamic public var created_at: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var data: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
}
extension Growlytics.NotificationResponse {
  @objc @NSManaged dynamic public var created_at: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var data: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers public class GrowlyticsLifeCycleCallback : ObjectiveC.NSObject {
  public static let shared: Growlytics.GrowlyticsLifeCycleCallback
  @available(iOS 13.0, *)
  public func register(scene: UIKit.UIScene)
  public func register(application: UIKit.UIApplication)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(CustomerAttributes) public class CustomerAttributes : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(LoginInfo) public class LoginInfo : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GrowlyticsSdk {
  public static func getInstance() -> Growlytics.GrowlyticsSdk
  public func track(eventName: Swift.String)
  public func trackAppInstalled()
  public func trackNotificationReport(action: Swift.String, notificationResponse: [Swift.String : Any])
  public func track(_ eventName: Swift.String, _ eventAttributes: [Swift.String : Any]?)
  public func identify(_ profileAttributes: [Swift.String : Any]?)
  public func identify(_ uniqueCustomerId: Swift.String?, _ profileAttributes: [Swift.String : Any]?)
  public func loginUser(_ uniqueCustomerId: Swift.String?, _ profileAttributes: [Swift.String : Any]?)
  public func logoutUser()
  public func updateCustomer(_ customerAttributes: [Swift.String : Any]?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class GrwNotificationService : UserNotifications.UNNotificationServiceExtension {
  @objc override dynamic open func didReceive(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @objc override dynamic open func serviceExtensionTimeWillExpire()
  @objc override dynamic public init()
  @objc deinit
}
extension Growlytics.LoginInfo {
  @objc @NSManaged dynamic public var created_at: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var data: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class GrwNotificationViewController : UIKit.UIViewController, UserNotificationsUI.UNNotificationContentExtension {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc open func didReceive(_ notification: UserNotifications.UNNotification)
  @_Concurrency.MainActor(unsafe) @objc open func didReceive(_ response: UserNotifications.UNNotificationResponse, completionHandler completion: @escaping (UserNotificationsUI.UNNotificationContentExtensionResponseOption) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(LogoutInfo) public class LogoutInfo : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Growlytics.SavePush {
  @objc @NSManaged dynamic public var created_at: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var data: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
}
public protocol NotificatioDataSendingDelegateProtocol {
  func sendNotificationDataToAppDelegate(kvPair: [[Swift.String : Any]], screenName: Swift.String, action: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class GrowlyticsMessagingService : ObjectiveC.NSObject {
  public static let shared: Growlytics.GrowlyticsMessagingService
  public var delegate: (any Growlytics.NotificatioDataSendingDelegateProtocol)?
  public func setPushToken(_ deviceToken: Foundation.Data)
  public func didFailToRegisterForPush()
  @objc override dynamic public init()
  @objc deinit
}
extension Growlytics.GrowlyticsMessagingService : UserNotifications.UNUserNotificationCenterDelegate {
  public func didReceiveNotificationResponse(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse)
}
extension Growlytics.CustomerAttributes {
  @objc @NSManaged dynamic public var created_at: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var data: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
}
final public class GrwNotification {
  public init(_ remoteInfo: [Swift.String : Any])
  final public func getTrackingId() -> Swift.String
  final public func getDeepLink() -> Swift.String
  final public func getTtl() -> Swift.String
  final public func isDoRender() -> Swift.Bool
  final public func getActionButtons() -> [Growlytics.GrwNotificationAction]?
  final public func getSmallIconColor() -> Swift.String
  final public func getPriority() -> Swift.String
  final public func getData() -> [Swift.String : Any]
  final public func getNotifiaticationChannel() -> Swift.String
  final public func getTitle() -> Swift.String
  final public func getSubTitle() -> Swift.String
  final public func getMessage() -> Swift.String
  final public func getImageLink() -> Swift.String
  final public func getButton() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GrwNotificationAction : Swift.Codable {
  public var label: Swift.String!
  public var deeplinkUrl: Swift.String?
  public var index: Swift.Int?
  public var id: Swift.Int?
  public var actionId: Swift.String!
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
final public class GrowlyticsData {
  public init(_ growlyticsData: [Swift.String : Any])
  final public func getMedia() -> Growlytics.Media
  final public func getClick() -> Growlytics.Click
  final public func getKvData() -> [[Swift.String : Any]]
  final public func getDeliveryData() -> Growlytics.DeliveryReport
  @objc deinit
}
final public class Click {
  public init(_ clickData: [Swift.String : Any])
  final public func getAction() -> Swift.String
  final public func getUrl() -> Swift.String
  final public func getDeepLink() -> Swift.String
  final public func getScreen() -> Swift.String
  @objc deinit
}
final public class Media {
  public init(_ mediaData: [Swift.String : Any])
  final public func getImage() -> Swift.String
  @objc deinit
}
final public class KVPair {
  public init(_ kvData: [Swift.String : Any])
  final public func getKey() -> Swift.String
  final public func getValue() -> Swift.String
  @objc deinit
}
final public class DeliveryReport {
  public init(_ deliveryData: [Swift.String : Any])
  final public func getUrl() -> Swift.String
  final public func getInfo() -> [Swift.String : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SavePush) public class SavePush : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class GrwNotificationServiceExtension : UserNotifications.UNNotificationServiceExtension {
  open class func didReceive(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension Growlytics.LogoutInfo {
  @objc @NSManaged dynamic public var created_at: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var data: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(NotificationResponse) public class NotificationResponse : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
